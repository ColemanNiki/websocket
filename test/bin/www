#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var stream = require('../stream');
var http = require('http');
var WebSocket = require('ws');
var fs = require('fs');
var https = require('https');

var options = {
  key:fs.readFileSync('center.key'),
  cert: fs.readFileSync('center.pem')
}

var STREAM_SECRET = 'secret',
	STREAM_PORT = 8081,
	WEBSOCKET_PORT = 8082,
	RECORD_STREAM = false;

// var streamServer = http.createServer(function(request,response){
// // var streamServer = https.createServer(options,function(request,response){
//   var params = request.url.substr(1).split('/');

// 	if (params[0] !== STREAM_SECRET) {
// 		console.log(
// 			'Failed Stream Connection: '+ request.socket.remoteAddress + ':' +
// 			request.socket.remotePort + ' - wrong secret.'
// 		);
// 		response.end();
// 	}
//   console.log("streamServer come");
//   response.connection.setTimeout(0);
//   request.on('data',function(data){
//     socketServer.broadcast(data);
//   });
// }).listen(STREAM_PORT);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8100');
app.set('port', port);

/**
 * Create HTTP server.
 */
// var server = http.createServer(app);
var server = https.createServer(options,app);
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
// server.on('listening', onListening);
// var socketServer = new WebSocket.Server({port:WEBSOCKET_PORT,perMessageDeflate:false});
var socketServer = new WebSocket.Server({server:server});
socketServer.connectionCount = 0;
socketServer.on('connection',function(socket){
  console.log("start websocket");
  socketServer.connectionCount++;
  socket.on('close',function(code,message){
    socketServer.connectionCount--;
    console.log("number: "+socketServer.connectionCount);
  });
});

socketServer.broadcast = function(data){
  socketServer.clients.forEach(function each(client){
    if(client.readyState == WebSocket.OPEN){
      client.send(data);
    }
  });
};

stream.send = socketServer.broadcast;
// var streamServer = http.createServer(stream).listen(STREAM_PORT);
var streamServer = https.createServer(options,stream).listen(STREAM_PORT);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }
