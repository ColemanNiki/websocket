#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var stream = require('../stream');
var http = require('http');
var fs = require('fs');
var https = require('https');
var url = require('url');
var options = {
  key: fs.readFileSync('center.key'),
  cert: fs.readFileSync('center.pem')
}

global.isSSL = false;
global.connectList = [];

var STREAM_PORT = 8081;

var port = normalizePort(process.env.PORT || '8100');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server;
if (global.isSSL) {
  server = https.createServer(options, app);
}
else {
  server = http.createServer(app);
}
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);

var socketServer = require('../socket')(server);

stream.send = socketServer.broadcast;
var streamServer;
if (global.isSSL) {
  streamServer = https.createServer(options, stream).listen(STREAM_PORT);
}
else {
  streamServer = http.createServer(stream).listen(STREAM_PORT);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}